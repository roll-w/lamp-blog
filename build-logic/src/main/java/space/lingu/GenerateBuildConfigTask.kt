/*
 * Copyright (C) 2023 RollW
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package space.lingu

import org.gradle.api.DefaultTask
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.internal.TaskOutputsInternal
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import java.io.File
import java.time.Instant
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

/**
 * @author RollW
 */
abstract class GenerateBuildConfigTask : DefaultTask() {

    // TODO: get outputDirectory from project
    @get:OutputDirectory
    abstract val outputDirectory: DirectoryProperty

    @get:Input
    abstract val packageName: Property<String>

    @get:Input
    abstract val version: Property<String>

    companion object {
        private const val OUTPUT_DIR = "generated/sources/buildconfig/java/main"
    }

    @TaskAction
    fun generateBuildConfig() {
        // TODO: allow to customize the build config fields

        val outputDir = createDirByPackageName()
        val buildTime = ZonedDateTime.now(ZoneId.of("UTC"))
            .truncatedTo(ChronoUnit.SECONDS)
            .format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
        val buildJavaVersion = System.getProperty("java.version")

        val buildBranch = "git rev-parse --abbrev-ref HEAD".runCommand()
        val commitId = "git rev-parse HEAD".runCommand()
        val commitIdAbbrev = "git rev-parse --short HEAD".runCommand()
        val commitTimestamp = "git log -1 --format=%ct".runCommand().toLong()
        val commitTime = ZonedDateTime.ofInstant(
            Instant.ofEpochSecond(commitTimestamp),
            ZoneId.of("UTC")
        ).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)

        println(
            """
            BuildConfig: 
                - buildTime: $buildTime
                - javaVersion: $buildJavaVersion
                - buildBranch: $buildBranch
                - commitId: $commitId
                - commitIdAbbrev: $commitIdAbbrev
                - commitTime: $commitTime
                - version: ${version.get()}
        """.trimIndent()
        )

        val content = """
            package ${packageName.get()};

            /**
             * This class is generated by GenerateBuildConfigTask.
             * Do not modify this file manually.
             */
            public final class BuildConfig {
                public static final String BUILD_TIME = "$buildTime";
                public static final String JAVA_VERSION = "$buildJavaVersion";
                public static final String BUILD_BRANCH = "$buildBranch";
                public static final String COMMIT_ID = "$commitId";
                public static final String COMMIT_ID_ABBREV = "$commitIdAbbrev";
                public static final String COMMIT_TIME = "$commitTime";
                public static final String VERSION = "${version.get()}";
                
                private BuildConfig() {}
            }
        """.trimIndent()

        File(outputDir, "BuildConfig.java").writeText(content)
    }

    override fun getOutputs(): TaskOutputsInternal {
        return super.getOutputs().also {
            it.upToDateWhen { false }
        }
    }

    private fun createDirByPackageName(): File {
        val packageName = packageName.get()
        val outputDir = File(outputDirectory.asFile.get(), OUTPUT_DIR)
        val packageDir = File(outputDir, packageName.replace(".", "/"))
        packageDir.mkdirs()
        return packageDir
    }

    private fun String.runCommand(): String {
        return ProcessBuilder(*split(" ").toTypedArray())
            .redirectOutput(ProcessBuilder.Redirect.PIPE)
            .redirectError(ProcessBuilder.Redirect.PIPE)
            .start()
            .inputStream.bufferedReader().readText().trim()
    }
}
